Timed(OneStep) {

-- channel M_ctrl0_stm0_enteredV, M_ctrl0_stm0_exitV : M_ctrl0_stm0_SIDS

-- declare clocks
M_ctrl0_stm0_ClockSet = {}
channel M_ctrl0_stm0_clockReset -- no clocks declared

-- declare trigger deadlines channel
channel M_ctrl0_stm0_deadline : M_ctrl0_stm0_TIDS.Signal

-- compile clocks process

-- set of strings that uniquely identify the waiting conditions, each of which is 
-- used to synchronise with the Memory process to set the correspoding variable in
-- the memory process.
M_ctrl0_stm0_setWC_identifierSet = {"dummy"}

-- declaring setWC channel for updating memory variables related to clocks
channel M_ctrl0_stm0_setWC : M_ctrl0_stm0_setWC_identifierSet.Bool

-- set of pairs capturing waiting condition processes and their alphabet
M_ctrl0_stm0_WCset(id__) = {  }
-- set of transition events for which synchronisation is required between Clocks and the Memory process
M_ctrl0_stm0_WCsync = {||}
-- set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
-- from the set of all state machine state identifiers.
M_ctrl0_stm0_WCresets = {| | x <- M_ctrl0_stm0_SIDS |}



-- Clocks process
M_ctrl0_stm0_Clocks(id__) = || (alpha, P) : M_ctrl0_stm0_WCset(id__) @ [alpha] wbisim(P)

CS_M_ctrl0_stm0_s0_sync = {|
	M_ctrl0_stm0_enter.y.x, 
	M_ctrl0_stm0_entered.y.x, 
	M_ctrl0_stm0_exit.y.x, 
	M_ctrl0_stm0_exited.y.x,
	M_ctrl0_stm0_enter.x.y, 
	M_ctrl0_stm0_entered.x.y, 
	M_ctrl0_stm0_exit.x.y, 
	M_ctrl0_stm0_exited.x.y |
	x <- {"M_ctrl0_stm0_s0","M_ctrl0_stm0_F"},
	y <- {"M_ctrl0_stm0_s0"}
|}



M_ctrl0_stm0_s0_int_int = {||}


M_ctrl0_stm0_s0_int_triggers = {||}

S_M_ctrl0_stm0_s0(id__) = let
	T_M_ctrl0_stm0_T1(id__)	= M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T1" ->  M_ctrl0_stm0_exit!"M_ctrl0_stm0_s0"!"M_ctrl0_stm0_s0" -> SKIP;
						SKIP;M_ctrl0_stm0_exited!"M_ctrl0_stm0_s0"!"M_ctrl0_stm0_s0" -> SKIP;
						M_ctrl0_stm0_enter!"M_ctrl0_stm0_s0"!"M_ctrl0_stm0_F" -> M_ctrl0_stm0_entered!"M_ctrl0_stm0_s0"!"M_ctrl0_stm0_F" ->
						S_M_ctrl0_stm0_s0(id__)

	S_M_ctrl0_stm0_s0_execute(id__,o__) = 
	SKIP; 
	M_ctrl0_stm0_entered!o__!"M_ctrl0_stm0_s0" ->
	   (SKIP
	   														; STOP /\ (
	   															    T_M_ctrl0_stm0_T1(id__)
	   															    []
	   															    M_ctrl0_stm0_internal__?x:diff(M_ctrl0_stm0_TIDS,{"__NULLTRANSITION__","M_ctrl0_stm0_T1"}) ->
	   															      M_ctrl0_stm0_exit?y:diff(M_ctrl0_stm0_SIDS,{"M_ctrl0_stm0_s0"})!"M_ctrl0_stm0_s0" -> (
	   															      	SKIP;
	   															      	M_ctrl0_stm0_exited!y!"M_ctrl0_stm0_s0" -> SKIP);
	   															      	S_M_ctrl0_stm0_s0(id__)
	   															    )
	   														)
within
M_ctrl0_stm0_enter?x__:diff(M_ctrl0_stm0_SIDS,{"M_ctrl0_stm0_s0"})!"M_ctrl0_stm0_s0" -> ( 
	S_M_ctrl0_stm0_s0_execute(id__,x__)) 
CS_M_ctrl0_stm0_F_sync = {|
	M_ctrl0_stm0_enter.y.x, 
	M_ctrl0_stm0_entered.y.x, 
	M_ctrl0_stm0_exit.y.x, 
	M_ctrl0_stm0_exited.y.x,
	M_ctrl0_stm0_enter.x.y, 
	M_ctrl0_stm0_entered.x.y, 
	M_ctrl0_stm0_exit.x.y, 
	M_ctrl0_stm0_exited.x.y |
	x <- {"M_ctrl0_stm0_s0","M_ctrl0_stm0_F"},
	y <- {"M_ctrl0_stm0_F"}
|}



M_ctrl0_stm0_F_int_int = {||}


M_ctrl0_stm0_F_int_triggers = {||}

S_M_ctrl0_stm0_F(id__) = let

	S_M_ctrl0_stm0_F_execute(id__,o__) = 
	SKIP; 
	M_ctrl0_stm0_entered!o__!"M_ctrl0_stm0_F" ->
	   M_ctrl0_stm0_terminate -> SKIP
	   within
M_ctrl0_stm0_enter?x__:diff(M_ctrl0_stm0_SIDS,{"M_ctrl0_stm0_F"})!"M_ctrl0_stm0_F" -> ( 
	S_M_ctrl0_stm0_F_execute(id__,x__)) 

I_M_ctrl0_stm0_i(id__) = T_M_ctrl0_stm0_T0(id__)

M_ctrl0_stm0_int_int = {|
M_ctrl0_stm0_internal__."M_ctrl0_stm0_T0",
M_ctrl0_stm0_internal__."M_ctrl0_stm0_T1"
|}


T_M_ctrl0_stm0_T0(id__)	= M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T0" -> WAIT(3);WAIT(3);WAIT(1);M_ctrl0_stm0_enter!"M_ctrl0_stm0"!"M_ctrl0_stm0_s0" -> M_ctrl0_stm0_entered!"M_ctrl0_stm0"!"M_ctrl0_stm0_s0" ->
SKIP

S_M_ctrl0_stm0_s0_R(id__) = S_M_ctrl0_stm0_s0(id__)
 		[|diff(M_ctrl0_stm0_int_int,M_ctrl0_stm0_s0_triggers)|]
 		SKIP
 		
S_M_ctrl0_stm0_F_R(id__) = S_M_ctrl0_stm0_F(id__)
 		[|diff(M_ctrl0_stm0_int_int,M_ctrl0_stm0_F_triggers)|]
 		SKIP
 		
STM_M_ctrl0_stm0(id__) = (I_M_ctrl0_stm0_i(id__)
[|{|M_ctrl0_stm0_enter.x.y,
		M_ctrl0_stm0_entered.x.y,
		M_ctrl0_stm0_exit.x.y,
		M_ctrl0_stm0_exited.x.y |
		x <- diff(M_ctrl0_stm0_SIDS,{"M_ctrl0_stm0_s0","M_ctrl0_stm0_F"}),
		y <- {"M_ctrl0_stm0_s0","M_ctrl0_stm0_F"}
|}|]
(S_M_ctrl0_stm0_s0_R(id__)
  [|inter(CS_M_ctrl0_stm0_s0_sync,CS_M_ctrl0_stm0_F_sync)|]
 S_M_ctrl0_stm0_F_R(id__))
 	)
-- optimized memory process
channel getWC_M_ctrl0_stm0 : M_ctrl0_stm0_setWC_identifierSet.Bool


MemoryTransitions_M_ctrl0_stm0(id__) = ((M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T0" -> MemoryTransitions_M_ctrl0_stm0(id__)
[]
M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T1" -> MemoryTransitions_M_ctrl0_stm0(id__)))


MemoryVariablesProcesses_M_ctrl0_stm0 = {}

MemoryVariables_M_ctrl0_stm0 = ||| (P, alpha) : MemoryVariablesProcesses_M_ctrl0_stm0 @ P
MemoryVariablesSyncSet_M_ctrl0_stm0 = {||}
MemoryVariablesHideSet_M_ctrl0_stm0 = {||}

MemoryN_M_ctrl0_stm0(id__) = (wbisim(MemoryVariables_M_ctrl0_stm0) [| MemoryVariablesSyncSet_M_ctrl0_stm0 |] wbisim(MemoryTransitions_M_ctrl0_stm0(id__))) \ MemoryVariablesHideSet_M_ctrl0_stm0

-- unoptimized memory
Memory_M_ctrl0_stm0(id__) = (
M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T0" -> Memory_M_ctrl0_stm0(id__)[]
M_ctrl0_stm0_internal__!"M_ctrl0_stm0_T1" -> Memory_M_ctrl0_stm0(id__)
)

MemoryO_M_ctrl0_stm0(id__) = Memory_M_ctrl0_stm0(id__)

-- main process
M_ctrl0_stm0_aux(id__) = prioritise(timed_priority(((wbisim(STM_M_ctrl0_stm0(id__))
	[|Union({
		{||},
		{|M_ctrl0_stm0_internal__."M_ctrl0_stm0_T0",
		M_ctrl0_stm0_internal__."M_ctrl0_stm0_T1"|}
		,
		{|M_ctrl0_stm0_deadline|},
		M_ctrl0_stm0_WCresets
	})|]
	(wbisim(MemoryN_M_ctrl0_stm0(id__)) [| union({|M_ctrl0_stm0_setWC|},M_ctrl0_stm0_WCsync) |] M_ctrl0_stm0_Clocks(id__))\{|M_ctrl0_stm0_setWC|}
)\union(union({||},
{||}),{|M_ctrl0_stm0_deadline|}))
[|{|M_ctrl0_stm0_terminate|}|>SKIP\{|M_ctrl0_stm0_internal__|}),<union(M_ctrl0_stm0_internal_events,{|M_ctrl0_stm0_clockReset,M_ctrl0_stm0_terminate|}),{tock}>)

M_ctrl0_stm0_internal_(id__) = prioritise(timed_priority(((wbisim(STM_M_ctrl0_stm0(id__))
	[|Union({
	{||},
	{|M_ctrl0_stm0_internal__."M_ctrl0_stm0_T0",
	M_ctrl0_stm0_internal__."M_ctrl0_stm0_T1"|}
	,
	{|M_ctrl0_stm0_deadline|},
	M_ctrl0_stm0_WCresets
	})|]
	(wbisim(MemoryN_M_ctrl0_stm0(id__)) [| union({|M_ctrl0_stm0_setWC|},M_ctrl0_stm0_WCsync) |] M_ctrl0_stm0_Clocks(id__))\{|M_ctrl0_stm0_setWC|}
)\union(union({||},
{||}),{|M_ctrl0_stm0_deadline|}))
[|{|M_ctrl0_stm0_terminate|}|>SKIP),<union(M_ctrl0_stm0_internal_events,{|M_ctrl0_stm0_internal__,M_ctrl0_stm0_clockReset,M_ctrl0_stm0_terminate|}),{tock}>)

-- With no internal events visible
M_ctrl0_stm0(id__) = timed_priority(M_ctrl0_stm0_aux(id__) \ union(M_ctrl0_stm0_internal_events,{|M_ctrl0_stm0_clockReset|}))

-- With enter/entered/exit/exited events visible
M_ctrl0_stm0_FVS(id__) = timed_priority(M_ctrl0_stm0_aux(id__) \ {|M_ctrl0_stm0_clockReset|})

-- With enterV/enteredV/exitV/exitedV events visible
M_ctrl0_stm0_VS(id__) = ShowV_M_ctrl0_stm0(timed_priority(M_ctrl0_stm0_aux(id__) \ {|M_ctrl0_stm0_clockReset|}))

-- With clock resets visible
M_ctrl0_stm0_FVS_C(id__) = M_ctrl0_stm0_aux(id__)
}

