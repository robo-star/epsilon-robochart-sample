ExternalEvents_M_ctrl0_stm0 = {||}

P_T_M_ctrl0_stm0 =  T_M_ctrl0_stm0(0)
P_M_ctrl0_stm0 =  M_ctrl0_stm0(0)
P_T_M_ctrl0_stm0_VS =  T_M_ctrl0_stm0_VS(0)
P_M_ctrl0_stm0_VS =  M_ctrl0_stm0_VS(0)

assert P_T_M_ctrl0_stm0 :[deterministic]
assert P_T_M_ctrl0_stm0 :[divergence-free]
assert P_T_M_ctrl0_stm0 ; RUN({tock}) :[deadlock-free]

-- no time locks
assert RUN({tock}) ||| CHAOS(ExternalEvents_M_ctrl0_stm0)      [F= prioritise((P_T_M_ctrl0_stm0 ; RUN({tock})) |\ union(ExternalEvents_M_ctrl0_stm0,{tock}),<{},{tock}>)

-- zeno freedom
assert P_T_M_ctrl0_stm0 |\ union(ExternalEvents_M_ctrl0_stm0,{tock})  :[divergence-free]

-- every state is reachable

assert not STOP [T= ShowEnteredV_M_ctrl0_stm0(P_T_M_ctrl0_stm0_VS) |\ {|M_ctrl0_stm0_enteredV|}
assert not STOP [T= ShowEnteredV_M_ctrl0_stm0(P_T_M_ctrl0_stm0_VS) |\ {|M_ctrl0_stm0_enteredV|}

-- states can be reached infinitely often
assert ShowEnteredV_M_ctrl0_stm0(P_T_M_ctrl0_stm0_VS) |\ {|M_ctrl0_stm0_enteredV."M_ctrl0_stm0_s0"|} [T= RUN({|M_ctrl0_stm0_enteredV."M_ctrl0_stm0_s0"|})
assert ShowEnteredV_M_ctrl0_stm0(P_T_M_ctrl0_stm0_VS) |\ {|M_ctrl0_stm0_enteredV."M_ctrl0_stm0_F"|} [T= RUN({|M_ctrl0_stm0_enteredV."M_ctrl0_stm0_F"|})

-- timed model is a refinement
assert sbisim(diamond(P_T_M_ctrl0_stm0)) [F= P_T_M_ctrl0_stm0 \ {tock}
assert sbisim(diamond(P_T_M_ctrl0_stm0_VS)) [T= P_T_M_ctrl0_stm0_VS \ {tock}

-- do time constraints constrain traces?
assert P_T_M_ctrl0_stm0 \ {tock} [T= sbisim(diamond(P_M_ctrl0_stm0))
assert P_T_M_ctrl0_stm0_VS \ {tock} [T= sbisim(diamond(P_M_ctrl0_stm0_VS))

-- memory models consistency check
T_MemoryN_M_ctrl0_stm0 =  timed::MemoryN_M_ctrl0_stm0(0)
T_MemoryO_M_ctrl0_stm0 =  timed::MemoryO_M_ctrl0_stm0(0)

assert T_MemoryN_M_ctrl0_stm0 [FD= T_MemoryO_M_ctrl0_stm0
assert T_MemoryO_M_ctrl0_stm0 [FD= T_MemoryN_M_ctrl0_stm0

-- clocks used after reset
